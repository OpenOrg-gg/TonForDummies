;; High-Load Wallet Wrapper for AMM Pool v3
;; This contract wraps a standard Jetton and can only be managed by the AMM pool

;; Constants
const int OP_TRANSFER = 0x0f8a7ea5;
const int OP_INTERNAL_TRANSFER = 0x178d4519;
const int OP_BURN = 0x595f07bc;

;; Storage variables
global slice jetton_minter_address;  ;; Address of the original Jetton minter
global slice pool_address;           ;; Address of the AMM pool that manages this wrapper
global int total_supply;             ;; Total supply of wrapped Jettons

;; Initialize the wrapper
() init(slice _jetton_minter_address, slice _pool_address) impure {
    jetton_minter_address = _jetton_minter_address;
    pool_address = _pool_address;
    total_supply = 0;
}

;; Receive Jettons from users and mint wrapped Jettons
() receive_jettons(int amount, slice sender_address) impure {
    ;; Only the pool can call this function
    require(equal_slices(sender_address, pool_address), "Only the pool can receive Jettons");
    
    ;; Mint wrapped Jettons
    total_supply += amount;
    
    ;; Here we would typically send a notification to the user, but since this is internal,
    ;; we'll just log the minting
    ;; For real implementation, consider adding appropriate logging or notification mechanism
}

;; Transfer wrapped Jettons internally (between pool segments)
() internal_transfer(int amount, slice from_address, slice to_address) impure {
    ;; Only the pool can call this function
    require(equal_slices(msg.sender, pool_address), "Only the pool can transfer internally");
    
    ;; No need to update total_supply as it's just an internal transfer
    ;; For real implementation, consider adding appropriate logging or notification mechanism
}

;; Burn wrapped Jettons and release original Jettons
() burn_and_release(int amount, slice to_address) impure {
    ;; Only the pool can call this function
    require(equal_slices(msg.sender, pool_address), "Only the pool can burn and release");
    
    ;; Burn wrapped Jettons
    require(total_supply >= amount, "Insufficient wrapped Jettons");
    total_supply -= amount;
    
    ;; Release original Jettons
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_minter_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(
            begin_cell()
                .store_uint(OP_TRANSFER, 32)
                .store_uint(0, 64)  ;; query_id
                .store_coins(amount)
                .store_slice(to_address)
                .store_slice(pool_address)  ;; response_address
                .store_uint(0, 1)  ;; no custom payload
                .store_coins(1)  ;; forward_amount
                .store_uint(0, 1)  ;; no forward_payload
                .end_cell()
        )
        .end_cell();
    
    send_raw_message(msg, 64);  ;; mode 64: carry all remaining value of the inbound message
}

;; Get wallet data
(int, slice, slice) get_wallet_data() method_id {
    return (total_supply, jetton_minter_address, pool_address);
}
